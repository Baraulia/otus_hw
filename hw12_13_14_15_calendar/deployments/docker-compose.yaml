version: '3.9'

services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: backend
    ports:
      - "5435:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d backend" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - calendar_network
    volumes:
      - postgres-data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:management
    environment:
      RABBITMQ_DEFAULT_USER: rabbit
      RABBITMQ_DEFAULT_PASS: password
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - calendar_network

  calendar:
    build:
      context: ../
      dockerfile: build/calendar/Dockerfile
    restart: always
    environment:
      DATABASE: sql
      TRANSPORT: http
      sqlHost: postgres
      sqlPort: 5432
    ports:
      - "8888:8085"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - calendar_network

  scheduler:
    build:
      context: ../
      dockerfile: build/scheduler/Dockerfile
    restart: always
    environment:
      sqlHost: postgres
      sqlPort: 5432
      mbHost: rabbitmq
      mbPort: 5672
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - calendar_network

  sender:
    build:
      context: ../
      dockerfile: build/sender/Dockerfile
    restart: always
    environment:
      mbHost: rabbitmq
      mbPort: 5672
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - calendar_network

networks:
  calendar_network:

volumes:
  postgres-data:

